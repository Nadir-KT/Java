package com.java.Files;

import java.io.File;
import java.io.IOException;

public class Files {
	//The File class is an abstract representation of file and directory pathname. A pathname can be either absolute or relative.
	public static void main(String[] args) {
		/* Method Index
		 * canRead(): Returns true if the file is readable.
		 * canWrite(): Returns true if the file is writable.
		 * delete(): Deletes a file. Can delete a directory if it is empty.
		 * exists(): Returns true if the file/directory exists.
		 * getName(): Returns the name of the file/directory.
		 * getAbsolutePath(): Returns the full pathname of the file/directory.
		 * isDirectory(): Returns true if instance points to a directory.
		 * isFile(): Returns true if instance points to a file.
		 * length(): Returns the size of the file in bytes.
		 * list(): Returns a String[] array of the files in the directory.
		 * mkdir(): Creates a directory.
		 */
		File f1 = new File("filename.txt"); // Specify the filename
		System.out.println(f1);
		//public boolean createNewFile(): Creates an empty file. Returns true if successful.
		try {
			//public File getCanonicalFile(): Returns the canonical form of this abstract pathname.
			File f2=f1.getCanonicalFile();
			File f2=f1.getCanonicalFile();
			if(f1.createNewFile()) {
				System.out.println("File created");
			}
			else {
				System.out.println("File already exists");
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}

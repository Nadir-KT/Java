package com.java.MultiThreading;

public class Synchronization extends Thread {
	/* Synchronization is the capability to control the access of multiple threads to any shared resources.
	 * 1) Process Synchronization: It means sharing system resources by processes in a such a way that, 
	 * Concurrent access to shared data is handled thereby minimizing the chance of inconsistent data.
	 * A critical section is a code segment that can be accessed by only one process at a time.
	 * 2) Thread Synchronization
	 * 2.1 Mutual Exclusive (only 1 option from below is required for Synchronization)
	 * 2.1.1 Using synchronized method
	 * 2.1.2 Using synchronized block
	 * 2.1.3 Static synchronization
	 * 2.2 Inter-thread Communication--(Cooperation)
	 * Inter-thread communication in Java is a technique through which multiple threads communicate with each other.
	 * Inter-thread communication or Co-operation is all about allowing synchronized threads to communicate with each other.
	 * Cooperation (Inter-thread communication) is a mechanism in which a thread is paused running in its critical section and another thread is allowed to enter (or lock) in the same critical section to be executed.
	 * It is implemented by following methods of Object class:
	 * Inter-thread communication in Java can be achieved by using three methods provided by Object class of java.lang package. They are:
	 * 1. public void wait(): Causes the current thread to wait until another thread wakes it up by calling notify() method or the notifyAll() method for this object, 
	 *    or a specified amount of time has elapsed.
	 * 2. public void notify(): wakes up the first thread that called wait() on the same object.
	 * 3. public void notifyAll(): Wakes up all the threads that called wait( ) on the same object.
	 */
	synchronized void Reource0(int n) //2.1.1 synchronized method
	//static synchronized void Reource0(int n) //2.1.3 Static synchronized method
	//void Reource0(int n) //2.1.2 unsynchronized method
	{
		/* synchronized(this) //2.1.2 unsynchronized method with synchronized block
		{
			for(int i=1;i<=5;i++) {
				System.out.println(n*i);
			}
			try {
				Thread.sleep(500);
			} catch (Exception e) {
				// TODO: handle exception
				System.out.println(e);
			}
		} */
		// unsynchronized block
		for(int i=1;i<=5;i++) {
			System.out.println(n*i);
		}
		try {
			Thread.sleep(200);
		} catch (Exception e) {
			// TODO: handle exception
			System.out.println(e);
		}
	}
	public static void main(String[] args) {
		Synchronization s1=new Synchronization();
		Thread1 t1=new Thread1(s1);
		Thread2 t2=new Thread2(s1);
		t1.start();
		t2.start();
		
		InterThreadCom i1=new InterThreadCom();
	}

}

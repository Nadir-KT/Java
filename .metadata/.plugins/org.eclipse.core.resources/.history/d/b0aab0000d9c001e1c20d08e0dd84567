Java Database Connectivity (JDBC) is an application programming interface (API) for the Java programming language which defines how a client may access a database. It is a Java-based data access technology used for Java database connectivity. It is part of the Java Standard Edition platform, from Oracle Corporation.

What is API
API (Application programming interface) is a document that contains a description of all the features of a product or software. It represents classes and interfaces that software programs can follow to communicate with each other. An API can be created for applications, libraries, operating systems, etc.

JDBC stands for Java Database Connectivity. JDBC is a Java API to connect and execute the query with the database. It is a part of JavaSE (Java Standard Edition). JDBC API uses JDBC drivers to connect with the database. There are four types of JDBC drivers:

1. JDBC-ODBC Bridge Driver
2. Native Driver (partially java driver)
3. Network Protocol Driver (fully java driver)
4. Thin Driver (fully java driver)

1) JDBC-ODBC bridge driver - In Java 8, the JDBC-ODBC Bridge has been removed.
The JDBC-ODBC bridge driver uses ODBC driver to connect to the database. The JDBC-ODBC bridge driver converts JDBC method calls into the ODBC function calls. This is now discouraged because of thin driver.

Advantages:
* easy to use.
* can be easily connected to any database.
Disadvantages:
* Performance degraded because JDBC method call is converted into the ODBC function calls.
* The ODBC driver needs to be installed on the client machine.

2) Native-API driver (partially java driver)
The Native API driver uses the client-side libraries of the database. The driver converts JDBC method calls into native calls of the database API. It is not written entirely in java.

Advantage:
* performance upgraded than JDBC-ODBC bridge driver.
Disadvantage:
* The Native driver needs to be installed on the each client machine.
* The Vendor client library needs to be installed on client machine.

3) Network Protocol driver (fully java driver)
The Network Protocol driver uses middleware (application server) that converts JDBC calls directly or indirectly into the vendor-specific database protocol. It is fully written in java.

Advantage:
* No client side library is required because of application server that can perform many tasks like auditing, load balancing, logging etc.
Disadvantages:
* Network support is required on client machine.
* Requires database-specific coding to be done in the middle tier.
* Maintenance of Network Protocol driver becomes costly because it requires database-specific coding to be done in the middle tier.

4) Thin driver (fully java driver)
The thin driver converts JDBC calls directly into the vendor-specific database protocol. That is why it is known as thin driver. It is fully written in Java language.

Advantage:
* Better performance than all other drivers.
* No software is required at client side or server side.
Disadvantage:
* Drivers depend on the Database.

Java database connectivity steps
--------------------------------
The fundamental steps involved in the process of connecting to a database and executing a query consist of the following:
1.Import JDBC packages 
	https://dev.mysql.com/downloads/connector/j/
	https://mvnrepository.com/artifact/com.mysql/mysql-connector-j
	https://dev.mysql.com/doc/connector-j/en/connector-j-usagenotes-connect-drivermanager.html
	Project Properties->Java Build Path->Libraries->Add External JARs->Apply and Close
2.Load JDBC driver
	A. By creating a new class
	Class.forName("com.mysql.cj.jdbc.Driver");
	B. By reference
	DriverManager.deregisterDriver(new Driver());
3.Define database URL
	String url="jdbc:mysql://host_address:port/DataBaseName";
4.Establish a connection to the database URL using DriverManager.
	getConnection(String url, String user, String password);
5.Create a statement object to perform queries to the database.
	prepareStatement("insert into TableName(columns),values('"+values+"')");
6.Execute the statement object and return a query resultset.
	PreparedStatementObjectName.executeUpdate()
7.Close the connection with the specific database. 
	ConnectionName.close();
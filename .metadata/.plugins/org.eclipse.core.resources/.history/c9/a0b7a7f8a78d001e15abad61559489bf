package com.java.MultiThreading;

public class DeadLock {
	/* A deadlock is a situation where a set of processes are blocked because each process is holding a resource and waiting for another resource acquired by some other process. 
	 * In concurrent computing, deadlock is any situation in which no member of some group of entities can proceed because each waits for another member, including itself, to take action, such as sending a message or, more commonly, releasing a lock.
	 * Deadlocks are a common problem in multiprocessing systems, parallel computing, and distributed systems, because in these contexts systems often use software or hardware locks to arbitrate shared resources and implement process synchronization.
	 * In an operating system, a deadlock occurs when a process or thread enters a waiting state because a requested system resource is held by another waiting process, 
	 * which in turn is waiting for another resource held by another waiting process. 
	 * If a process remains indefinitely unable to change its state because resources requested by it are being used by another process that itself is waiting, 
	 * then the system is said to be in a deadlock.
	 * In a communications system, deadlocks occur mainly due to loss or corruption of signals rather than contention for resources.
	 * A Deadlock is a situation where each of the computer process waits for a resource which is being assigned to some another process. 
	 * In this situation, none of the process gets executed since the resource it needs, is held by some other process which is also waiting for some other resource to be released.
	 * A deadlock is a situation in which more than one process is blocked because it is holding a resource and also requires some resource that is acquired by some other process. 
	 * Therefore, none of the processes gets executed.
	 */
}
